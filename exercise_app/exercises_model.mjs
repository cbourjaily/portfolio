/**
 * Christopher Vote
 */
import mongoose from 'mongoose';
import 'dotenv/config';

const EXERCISE_DB_NAME = 'exercise_db';

let connection = undefined;


/**
 * This function connects to the MongoDB server and to the database
 *  'exercise_db' in that server.
 */
async function connect(){
    try{
        connection = await mongoose.connect(process.env.MONGODB_CONNECT_STRING, 
                {dbName: EXERCISE_DB_NAME});
        console.log("Successfully connected to MongoDB using Mongoose!");
    } catch(err){
        console.log(err);
        throw Error(`Could not connect to MongoDB ${err.message}`)
    }
}     


/**
 * Define the schema.
 */
const exerciseSchema = mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    reps: {
        type: Number,
        required: true
    },
    weight: {
        type: Number,
        required: true
    },
    unit: {
        type: String,
        required: true
    },
    date: {
        type: String,
        required: true
    }
});


/**
 * Compile the model from the schema.
 */
const Exercise = mongoose.model('Exercise', exerciseSchema, 'exercises');


/**
 * Create an exercise.
 * @param {String} name
 * @param {Number} reps 
 * @param {Number} weight
 * @param {String} unit
 * @param {String} date
 * @returns A promise. Resolves to the JSON object for the document created by calling save.
 */

const createExercise = async (name, reps, weight, unit, date) => {
    // Call the constructor to create an instance of the model class Exercise.
    const exercise = new Exercise({
        name: name,
        reps: reps,
        weight: weight,
        unit: unit,
        date: date
    });
    // Call save to persist this object as a document in MongoDB.
    return exercise.save();
};


/**
 * Retrieves an array of all exercises in the database. If no exercises exist,
 * an empty array is returned.
 * @returns An array of exercises.
 */
const findExercises = async () => {
    const query = Exercise.find();
    return query.exec();
};


/**
 * Retrieves an exercise by it's ID.
 * @param {string} id A unique ID generated by MongoDB.
 * @returns The exercise matching the unique ID.
 */
const retrieveID = async (id) => {
    return await Exercise.findById(id);
};


/**
 * Updates the relevant data categories of the exercise matching the 
 * ID.
 * @param {string} id A unique ID generated by MongoDB.
 * @return {object} An exercise object with updated attributes.
 */
const updateExercise = async (id, updateData) => {
    const exerciseUpdate = await Exercise.findByIdAndUpdate(id, updateData, {
        new: true
    });
    return exerciseUpdate;
};


/**
 * Deletes the exercise matching a unique ID.
 * @param {string} id;
 */
const deleteExercise = async (id) => {
    const del = await Exercise.findByIdAndDelete(id);
    return del;
};


export { 
    connect,
    createExercise,
    findExercises,
    retrieveID,
    updateExercise,
    deleteExercise
};